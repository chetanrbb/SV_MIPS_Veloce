
//////////////////////////////////////////////////////
// File Type: Functional Coverage
// 
//
// This will read the instruction which is sent to the processor
// and check if the result of the operaiton is correct or not 
// For the instruction the result of total instructions issued, 
// Success, Errors will be shown. 
//////////////////////////////////////////////////////

typedef enum 
{
	ADD_op = 0,
	LW_op  = 0x23,
	ADDI_op = 0x08,
	BEQ_op = 0x04,
	SW_op = 0x2B,
	BNE_op = 0x05,
	J_op = 0x02
}opcode_t;

typedef enum
{
	ADD = 0x20,
	SUB = 0x22,
	AND = 0x24,
	NOR = 0x27,
	OR = 0x25,
	SLT = 0x2A,
	XOR = 0x13
}AluOp_t;

void FunctionalCoverage(unsigned int instr, unsigned char result)
{
	static unsigned int addCntr = 0, subCntr = 0, andCntr = 0, norCntr = 0, orCntr = 0, sltCntr = 0, xorCntr = 0;
	
	static unsigned int addCrctResult, addErrResult, subCrctResult, subErrResult, andCrctResult, andErrResult, norCrctResult, norErrResult, orCrctResult, orErrResult, sltCrctResult, sltErrResult, xorCrctResult, xorErrResult;
	
	static unsigned int lwopCntr = 0, lwCrctResult = 0, lwErrResult = 0, addCntr = 0, addCrctResult = 0, addErrResult = 0, beqCntr = 0, beqCrctResult = 0, beqErrResult = 0, swopCntr = 0, swopCrctResult = 0, swopErrResult = 0, bneCntr = 0, bneCrctResult = 0, bneErrResult = 0,jopCntr = 0, jopCrctResult = 0, jopErrResult = 0;
	
	switch((instr>>20) & 0x3F)	// read the instruction opcode 
	{
	case ADD_op: {
					switch(instr & 0x3F)	// read the funct bits 
					{
					case ADD: {
								addCntr++;
								(result)?(addCrctResult++):(addErrResult++);
								break;
							  }
					case SUB: {
								subCntr++;
								(result)?(subCrctResult++):(subErrResult++);
								break;
							  }
					case AND: {
								andCntr++;
								(result)?(andCrctResult++):(andErrResult++);
								break;
							  }
					case NOR: {
								norCntr++;
								(result)?(norCrctResult++):(norErrResult++);
								break;
							  }
					case OR:  {
								orCntr++;
								result?(orCrctResult++):(orErrResult++);
								break;
							  }
					case SLT: {
								sltCntr++;
								result?(sltCrctResult++):(sltErrResult++);
								break;
							  }
					case XOR: {
								xorCntr++;
								result?(xorCrctResult++):(xorErrResult++);
								break;
							  }
					}
					break;
				 }
		
	case LW_op: {
					lwopCntr++;
					result?(lwCrctResult++):(lwErrResult++);
					break;
				}
				
	case ADDI_op: {
					addiCntr++;
					result?(addiCrctResult++):(addiErrResult++);
					break;
				  }
				  
	case BEQ_op: {
					beqCntr++;
					result?(beqCrctResult++):(beqErrResult++);
					break;
				 }
				 
	case SW_op: {
					swopCntr++;
					result?(swopCrctResult++):(swopErrResult++);
					break;
				}
			
	case BNE_op: {
					bneCntr++;
					result?(bneCrctResult++):(bneErrResult++);
					break;
				}
				
	case J_op: {
					jopCntr++;
					result? (jopCrctResult++):(jopErrResult++);
					break;
			   }
	}
	
	if(!Fc_fp)
	{
		fopen();
	}
}